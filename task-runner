#!/bin/bash


# Autor Janusz Ładecki <szunaj13pl@gmail.com>

clear

#   ================= Configuration ==================  #

version=19.11.18.0
github_url='https://github.com/szunaj13pl/shell-task-runner'

config_folder="$HOME/.config/task-runner"

config_name="config.yml"
config_file="${config_folder}/${config_name}"

config_default_name="default_config.yml"
config_default_file="${config_folder}/${config_default_name}"


#   ================= Error code ==================  #

ERR_RUN_CONDITION_NOT_FULFILLED=100

#   ================= Utilities ==================  #

function logit(){

    local LOG_LEVEL=$1
    shift
    local MSG=$@
    local TIMESTAMP=$(date +"%Y-%m-%d %T")

    if [ $LOG_LEVEL = 'ERROR' ] || $VERBOSE
    then
        echo "${TIMESTAMP} ${HOST} $0 [$$]: ${LOG_LEVEL} ${MSG}"
        echo "$BASH_SOURCE [line: $LINENO] ${FUNCNAME[0]}"
        # TODO: Add logger
    fi
}

versionCompare() {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)

    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then

            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then

            return 2
        fi
    done

    return 0
}


function initial(){

    scriptName=$(basename $0)
    scriptServerVersion=$(mktemp -d /tmp/$scriptName.XXXXXX)

    # Use colors, but only if connected to a terminal, and that terminal supports them.
    if which tput >/dev/null 2>&1; then
        ncolors=$(tput colors)
    fi
    if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        BLUE="$(tput setaf 4)"
        BOLD="$(tput bold)"
        NORMAL="$(tput sgr0)"

        # Define dispaly formats
        AUTHOR_FORMAT=$( tput setab 0; tput setaf 2; )
        DESCRIPTION_FORMAT=$( tput setab 7; tput bold; tput setaf 0; )
        COMMAND_FORMAT=$( tput dim; tput setaf 6; )
        COMMAND2_FORMAT=$( tput sgr0; tput setab 0; tput setaf 2; tput bold; )
        OUTPUT_FORMAT=$( tput sgr0; tput setaf 4; )
        ERR_FORMAT=$( tput sgr0; tput setaf 1; tput bold; )
        INFO_FORMAT=$( tput sgr0; tput setaf 3; tput bold; )
        SCCESS_FORMAT=$( tput sgr0; tput setaf 2; tput bold; )
        CLEAR_FORMAT=$( tput sgr0; )
    else
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        BOLD=""
        NORMAL=""
    fi

    echo -e ${AUTHOR_FORMAT} "by Janusz Ładecki"; tput cud 3
}


function isInstalled(){

    local packagesName="$@"

    for package in $packagesName; do
        INSTALLED=$(dpkg-query -s "$package" 2>&1 | grep --no-messages Status )
        if [ "$INSTALLED" != "Status: install ok installed" ]; then
            echo -e "${NORMAL} $package ${RED}not installed ${NORMAL}"
            sudo apt-get install -y "$package" || echo -e "${RED} INSTALL ${package} ${NORMAL}"
        fi
    done
}


function getServerVersion(){

    git clone "$github_url" "$scriptServerVersion"
}


function refreshDefaultConfigFile(){

    cp -b "${scriptServerVersion}/${default_config_name}" "${default_config_file}"\
    && cp -b "${config_file}" "${config_file}.bak"

    if [ ! -s "${config_file}" ]; then
        cp -b "${config_default_file}" "${config_file}"
    fi
}


function refreshDefaultConfig(){

    local serverName="$1"
    local localName="$2"

    cp -b "${scriptServerVersion}/${serverName}" "${config_folder}/default_${localName}"\
    && cp -b "${config_folder}/${localName}" "${config_folder}/${localName}.bak"

    if [ ! -s "${config_folder}/${localName}" ]; then
        cp -b "${config_folder}/default_${localName}" "${config_folder}/${localName}"
    fi
}


function checkConfig(){

    if [ ! -s "${config_file}" ]; then

        mkdir -p "$config_folder" || echo "Can not create default config at ${config_file}" && echo "Default config was created"

        getServerVersion && refreshDefaultConfigFile \
        && refreshDefaultConfig "${config_default_name}" "${config_name}"

    fi

    loadConfig
}

function checkLastUpdateDate(){

    if [ "$autoupdate" == true ] || [ ! -z ${JUST_UPDATE+x} ]; then

        # Get last update date from config
        local last_update_date=$(cat "${config_file}" | grep --perl-regexp  'last_update_date\: ([0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2})' | cut -d " " -f 2)
        local current_date="$(date +%F)"

        if [[ ! "$current_date" == "$last_update_date" ]] || [ "$JUST_UPDATE" == true ]
        then
            sed -E -i "s/last_update_date\: ([0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2})/last_update_date\: $current_date/" "${config_file}"\
            || echo "Missing 'last_update_date' parameter in ${config_file}"
            echo "Check for update" && checkOnlineVersion
        fi

    else

        echo -e "Autoupdate is${RED} OFF ${NORMAL}"
    fi
}


function checkOnlineVersion(){

    ping -c 2 Github.com 2>>/dev/null 1>&2 || (echo -e "Github.com ${RED} Unrechable ${NORMAL}" && exit 1)

    getServerVersion

    local server_version=$(cat "${scriptServerVersion}/${scriptName}" | grep --max-count=1 'version' |  cut -d "=" -f 2)

    versionCompare $version $server_version \
    && echo -e "${YELLOW} Latest version is instaled ${NORMAL}" \
    || (echo -e "${GREEN} New wersion on GitHub ${NORMAL}" \
    && replaceLocalScript $server_version )

}


function replaceLocalScript(){

    local online_version="$1"
    local script_full_path=$(which ${scriptName} | head -n 1)

    cp -b "$script_full_path" "${script_full_path}.bak" \
    && cp -b "${scriptServerVersion}/${scriptName}" $(dirname $script_full_path) \
    && refreshDefaultConfigFile

    # Cleaning
    rm -rf "$scriptServerVersion" "${script_full_path}.bak"

    # TODO: Przetestować na czystym Ubuntu
    # echo -e "${GREEN}${BOLD}Skrypt zaktualizowany${NORMAL}"
    $scriptName && exit 0
}


function loadConfig(){
    eval $(parseYaml "${config_file}")
    declare -ax arrayOfCommands=($commands)
    ARRAY_OF_COMMANDS=(${arrayOfCommands[@]})
}

function parseYaml {

    local prefix=$2
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')

    sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
}'
}

# ==============  TaskRunner  ===============

function defineVariable(){
    local name="$1"
    local value="${2:-true}"
    # Define custom variable
    if [ ! -z "$name" ];then
        eval "$name"=$value
    fi
}

function defineVarOnGrep(){

    local stringToGrep="$1"
    local grepVarName="$2"

    grep --count "$stringToGrep" "$tmpfile" "$outputFile" >> /dev/null \
    && echo -e ${INFO_FORMAT}"\n\t $messageOnGrep ${CLEAR_FORMAT}\n"\
    && defineVariable "$grepVarName"
}

function setResultBadge(){

    local exitCode=$1
    local grepVarName="$2"

    if [ "$exitCode" == "SKIP" ]; then
        RESULT="${CLEAR_FORMAT}[${INFO_FORMAT}SKIP${CLEAR_FORMAT}]"
        exitCode=0

    elif [ "$exitCode" -ge 1 ]; then
        RESULT="${CLEAR_FORMAT}[${ERR_FORMAT}FAIL${CLEAR_FORMAT}]"
        echo -e ${ERR_FORMAT} "\n\t Error code $exitCode"

        # Define custom variable if Grep is not set
        if [ -z "$stringToGrep" ]; then
            defineVariable "$grepVarName"
        fi

    else
        RESULT="${CLEAR_FORMAT}[${SCCESS_FORMAT}DONE${CLEAR_FORMAT}]"
    fi

    # Moves cursor
    tput sc
    tput cuf 80;tput cuu 2; echo -e "$RESULT"
    tput rc
}

function runCommands(){
    for command in "${ARRAY_OF_COMMANDS[@]}"
    do
        parseYmlToCommand "${command}"
    done
}

function defineCommand(){
# declare -A commandDef=(
#     [verbose]=${1}
#     [dieOnError]=${2}
#     [command]="${3}"
#     [description]="${4}"
#     [successVarName]="${5}"
#     [failVarName]="${6}"
#     [grepVarName]="${7}"
#     [stringToGrep]="${8}"
#     [messageOnGrep]="${9}"
#     [runIfVarExistAndIsTrue]="${10}"
# )
    local verbose=${1}
    local dieOnError=${2}
    local command="${3}"
    local description="${4}"
    local successVarName="${5}"
    local failVarName="${6}"
    local grepVarName="${7}"
    local stringToGrep="${8}"
    local messageOnGrep="${9}"
    local runIfVarExistAndIsTrue="${10}"


    # Eval and Check if variable is define to 'true'
    if [ "${!runIfVarExistAndIsTrue}" != "true" ] && [ "$runIfVarExistAndIsTrue" != "" ];then
        return ${ERR_RUN_CONDITION_NOT_FULFILLED:-1}
    fi

    local scriptName=$(basename $0)
    local tmpfile=$(mktemp /tmp/$scriptName.XXXXXX)
    local outputFile=$(mktemp /tmp/$scriptName.XXXXXX)

    # Fuzzines
    if [ ${verbose} == true ] || (( "${verbose}" >= "1" )) || [ "${verbose}" == "v" ] || [ "${verbose}" == "verbose" ]; then
        verbose=true
    else
        verbose=false
    fi

    echo -e ${DESCRIPTION_FORMAT} "$description" ${CLEAR_FORMAT}
    echo -e ${COMMAND_FORMAT} "$command \n" ${CLEAR_FORMAT}

    preExecute "$command" $verbose "$grepVarName" "$successVarName"
    setResultBadge $exitCode "$grepVarName"

    echo -e ${CLEAR_FORMAT}"\n"

    rm "$tmpfile" "$outputFile"

    # Stop script on error (define)
    if [ "$dieOnError" == "true" ] && [ $exitCode -ge 1 ]; then
        exit $exitCode
    fi
}

function parseYmlToCommand(){

    local commandDefinition="$1"

    local command="${commandDefinition}_command"
    local verbose="${commandDefinition}_verbose"
    local exit_on_error="${commandDefinition}_exit_on_error"
    local description="${commandDefinition}_description"
    local set_var_grep="${commandDefinition}_set_var_grep"
    local set_var_success="${commandDefinition}_set_var_success"
    local set_var_fail="${commandDefinition}_set_var_fail"
    local set_var_on_success="${commandDefinition}_set_var_on_success"
    local grep="${commandDefinition}_grep"
    local grep_message="${commandDefinition}_grep_message"
    local run_if_var_is_true="${commandDefinition}_run_if_var_is_true"

    defineCommand \
    "${VERBOSE:-${!verbose}}"\
    "${!exit_on_error}"\
    "${!command}"\
    "${!description}"\
    "${!set_var_success}"\
    "${!set_var_fail}"\
    "${!set_var_grep}"\
    "${!grep}"\
    "${!grep_message}"\
    "${!run_if_var_is_true}"
}

function executeCommand(){

    local command="$1"
    local verbose=$2
    local grepVarName="$3"
    local successVarName="$4"


    if $verbose
    then
        script --quiet --return --command "$command" "$tmpfile"; exitCode=$?
    else
        echo -e ${OUTPUT_FORMAT}; script --quiet --return --command "$command 1> $outputFile" "$tmpfile"; exitCode=$?

        # Dispaly Output 1 if err and Output 2 is empty
        if [ -s "$tmpfile" ] && [ $exitCode -ge 1 ];then
            cat "$outputFile"
        fi
    fi

    if [ $exitCode -eq 0 ];then
        defineVariable "$successVarName"
    elif [ $exitCode -ge 1 ];then
        defineVariable "$failVarName"
    fi

    # Call grep function
    if [ ! -z "$stringToGrep" ]; then
        defineVarOnGrep "$stringToGrep" "$grepVarName"
    fi
}

function preExecute(){

    local commandDef="$1"
    local command="$1"
    local verbose=$2
    local grepVarName="$3"
    local successVarName="$4"

    case "$command" in

        "npm install")

            if [ -f package.json ]; then
                executeCommand "$command" $verbose "$grepVarName" "$successVarName"
            else
                echo -e "\n\t ${ERR_FORMAT}package.json${INFO_FORMAT} not found"
                exitCode=SKIP
            fi
        ;;
        *bin/console*)
            if ! [ -f bin/console ]; then
                echo -e ${INFO_FORMAT}"Change bin/console to app/console"${CLEAR_FORMAT}
                command=$(echo "$command" | sed -u 's/bin\/console/app\/console/')
                echo "$command"
            fi

            executeCommand "$command" $verbose "$grepVarName" "$successVarName"
        ;;
        *)
            executeCommand "$command" $verbose "$grepVarName" "$successVarName"
        ;;
    esac
}


usage() {
    echo -e "
    Usage: $(basename $0)                                   \n\n\
        -c    'edit configuration'                          \n\
        -d    'enable debuging mode'                        \n\
        -u    'self update'                                 \n\n\n\
    Configuration:                                          \n\n\
        Version:                    ${version}              \n\
        Repository:                 ${github_url}           \n\
        Configuration folder:       ${config_folder}        \n\
        Configuration file:         ${config_name}          \n\
        Default configuration file: ${config_default_name}     "
    1>&2; exit 1;
}


#   ================= MAIN ==================  #

while getopts ":dcuvvt" o; do
    case "${o}" in
        d)
            echo "Debug mode is ON"

            set -x ;
            set -o functrace
        ;;
        c)
            initial

            if [ -e "${config_file}" ]; then
                editor "${config_file}"
            else
                checkConfig
                editor "${config_file}"
            fi

            exit 0
        ;;
        u)
            JUST_UPDATE=true
        ;;
        v)
            VERBOSE=$(($VERBOSE + 1))
        ;;
#         t)
#             echo "Test run"

#             initial

#             guiScript=$(mktemp /tmp/$scriptName.XXXXXX)
#             gitlabNames=$(mktemp /tmp/$scriptName.XXXXXX)
#             gitlabGit=$(mktemp /tmp/$scriptName.XXXXXX)


#             function parseYmlToCommandNew(){

#                 commandDefinition="$1"

#                 local command="commands_${commandDefinition}_name"
#                 local description="commands_${commandDefinition}_description"
#                 local checked="commands_${commandDefinition}_checked"
#                 local commands="commands_${commandDefinition}_commands"


#                 defineCommandNew "${!name}" "${!description}" "${!checked}" "${!commands}"
#             }


#             function defineCommandNew(){


#                 local name=$1
#                 local description=$2
#                 local isChecked="$3"
#                 local commands="$4"

#                 [[ $isChecked == true ]] \
#                 && local checked="ON" \
#                 || local checked="OFF"

#                 echo -e "${name} ${description} ${checked}"
#                 # echo -e "${name} ${description} ${checked} ${commands}"

#                 # local scriptName=$(basename $0)
#                 # local tmpfile=$(mktemp /tmp/$scriptName.XXXXXX)
#                 # local outputFile=$(mktemp /tmp/$scriptName.XXXXXX)


#                 # if [ $verbose == true ] || [ "$verbose" == "v" ] || [ "$verbose" == "verbose" ]; then
#                 #     local verbose=true
#                 # else
#                 #     local verbose=false
#                 # fi

#                 # echo -e ${DESCRIPTION_FORMAT} "$description" ${CLEAR_FORMAT}
#                 # echo -e ${COMMAND_FORMAT} "$command \n" ${CLEAR_FORMAT}

#                 # preExecute "$command" $verbose "$grepVarName"
#                 # setResultBadge $exitCode "$grepVarName"

#                 # echo -e ${CLEAR_FORMAT}"\n"

#                 # rm "$tmpfile" "$outputFile"

#                 # dialog --title "Uruchom skrypt"  \
#                 #         --radiolist "Wybierz skrypt" 15 60 4 \
#                 #         "${ch[0]}" "${ch[1]}" ON \
#                 #         "${ch[2]}" "${ch[3]}" OFF \
#                 #         "${ch[4]}" "${ch[5]}" OFF \
#                 #         "${ch[6]}" "${ch[7]}" OFF


#             }

#             function formatData(){

#                 echo -e "${YELLOW} Loadnig script ${NORMAL}"

#                 local online="$1"
#                 i=1
#                 echo "$online" | while read line;do

#                     git="$(echo $line | jq -r ".git")"
#                     echo -e "$i) git clone --progress --recursive --verbose $git ;;" >> "$gitlabGit"

#                     name="$(echo $line | jq -r ".name")"
#                     local projects_names=$(echo $i" "\""$name"\" "off" >> "$gitlabNames")

#                 echo "$i $name "

#                     i=$[i+1]

#                 done
#             }


#             function createGui(){


#                 local projects_names="$(cat $gitlabNames)"

#             cat >> "$guiScript" <<- EndOfScript
#             #!/bin/bash

#             # Janusz Ładecki <szunaj13pl@gmail.com>
#             # 21.09.2017

#             echo $i

#             function measureScreen(){
#                 rows=$(tput lines)
#                 cols=$(tput cols)
#             }

#             function createGui(){
#                 local TYPE="radiolist"
#                 local HEIGHT=\$((rows - 3))
#                 local WIDTH=\$(( cols / 2))
#                 local CHOICE_HEIGHT=\$(( rows - 5))
#                 local MENU="by Janusz Ładecki\n\nChoose repo to clone:"

#                 local OPTIONS=($(cat $gitlabNames))

#                     local CHOICES=\$(dialog  --separate-output --\$TYPE   \
#                             "\$MENU" \
#                             \$HEIGHT \$WIDTH \$CHOICE_HEIGHT \
#                             "\${OPTIONS[@]}" \
#                             2>&1 >/dev/tty)

#                 clear

#                 for choice in \$CHOICES
#                 do
#                     case \$choice in

# EndOfScript


#                 # Insert git clone commands
#                 cat "$gitlabGit" >> "$guiScript"
#                 # Apend closing for 'for, case, function'
#                 echo -e "\n\t esac \n done \n} \n measureScreen \n createGui" >> "$guiScript"

#             }


#             function run(){
#                 chmod +x "$guiScript"
#                 "$guiScript"
#             }

#             eval $(parseYaml "./default_config.yml")

#             declare -a arrayOfCommands=($commands_order)

#             for command in "${arrayOfCommands[@]}"
#             do
#                 parseYmlToCommandNew "$command"
#             done

#             exit 0

#             test_run=true

#         ;;
        *)
            usage
        ;;
    esac
done
shift $((OPTIND-1))


# Defines variables and create temp files
initial
# Install requierd programs
isInstalled git wget

# Get config
checkConfig

# Check for new update
checkLastUpdateDate

[ "$JUST_UPDATE" == true ] && exit 0

# Run tasks
runCommands

# set +x

# parseYaml ${template_name}