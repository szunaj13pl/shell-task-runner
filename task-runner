#!/bin/bash

set -Euo pipefail

# Autor Janusz Ładecki <szunaj13pl@gmail.com>

clear

#   ================= Configuration ==================  #

VERSION=19.11.19.7
GITHUB_URL='https://github.com/szunaj13pl/shell-task-runner'

CONFIG_FOLDER="$HOME/.config/task-runner"

CONFIG_NAME="config.yml"
CONFIG_FILE="${CONFIG_FOLDER}/${CONFIG_NAME}"

CONFIG_DEFAULT_NAME="default_config.yml"
CONFIG_DEFAULT_FILE="${CONFIG_FOLDER}/${CONFIG_DEFAULT_NAME}"

CONFIG_REPO_NAME="rr.yml"

#   ================= Error code ==================  #

ERR_RUN_CONDITION_NOT_FULFILLED=100

#   ================= Utilities ==================  #

function logit(){

    local LOG_LEVEL=${1}
    shift
    local MSG=$@
    local TIMESTAMP=$(date +"%Y-%m-%d %T")

    if [ $LOG_LEVEL = 'ERROR' ] || $VERBOSE
    then
        echo "${TIMESTAMP} ${HOST} ${0} [$$]: ${LOG_LEVEL} ${MSG}"
        echo "$BASH_SOURCE [line: $LINENO] ${FUNCNAME[0]}"
        # TODO: Add logger
    fi
}

versionCompare() {
    if [[ ${1:-} == ${2:-} ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)

    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then

            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then

            return 2
        fi
    done

    return 0
}

function initial(){

    SCRIPT_ALIAS=$(basename ${0})
    SCRIPT_NAME='task-runner'
    SCRIPT_SERVER_VERSION=$(mktemp -d /tmp/${SCRIPT_NAME}.XXXXXX)

    # Use colors, but only if connected to a terminal, and that terminal supports them.
    if which tput >/dev/null 2>&1; then
        ncolors=$(tput colors)
    fi
    if [ -t 1 ] && [ -n "${ncolors}" ] && [ "$ncolors" -ge 8 ]; then
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        BLUE="$(tput setaf 4)"
        BOLD="$(tput bold)"
        NORMAL="$(tput sgr0)"

        # Define dispaly formats
        AUTHOR_FORMAT=$( tput setab 0; tput setaf 2; )
        DESCRIPTION_FORMAT=$( tput setab 7; tput bold; tput setaf 0; )
        COMMAND_FORMAT=$( tput dim; tput setaf 6; )
        COMMAND2_FORMAT=$( tput sgr0; tput setab 0; tput setaf 2; tput bold; )
        OUTPUT_FORMAT=$( tput sgr0; tput setaf 4; )
        ERR_FORMAT=$( tput sgr0; tput setaf 1; tput bold; )
        INFO_FORMAT=$( tput sgr0; tput setaf 3; tput bold; )
        SCCESS_FORMAT=$( tput sgr0; tput setaf 2; tput bold; )
        CLEAR_FORMAT=$( tput sgr0; )
    else
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        BOLD=""
        NORMAL=""
    fi

    echo -e ${AUTHOR_FORMAT} "by Janusz Ładecki"; tput cud 3
}

function isInstalled(){

    local packagesName="${@}"

    for package in ${packagesName}; do
        INSTALLED=$(dpkg-query -s "${package}" 2>&1 | grep --no-messages Status )
        if [ "$INSTALLED" != "Status: install ok installed" ]; then
            echo -e "${NORMAL} ${package} ${RED}not installed ${NORMAL}"
            sudo apt-get install -y "${package}" || echo -e "${RED} INSTALL ${package} ${NORMAL}"
        fi
    done
}

function getServerVersion(){

    git clone "${GITHUB_URL}" "${SCRIPT_SERVER_VERSION}"
}

function refreshDefaultConfigFile(){

    cp "${SCRIPT_SERVER_VERSION}/${CONFIG_DEFAULT_NAME}" "${CONFIG_DEFAULT_FILE}" \
    && cp -b "${CONFIG_DEFAULT_FILE}" "${CONFIG_FILE}"
}

function refreshDefaultConfig(){

    cp -b "${SCRIPT_SERVER_VERSION}/${CONFIG_DEFAULT_NAME}" "${CONFIG_FOLDER}/default_${CONFIG_NAME}"\
    && cp -b "${CONFIG_FOLDER}/${CONFIG_NAME}" "${CONFIG_FOLDER}/${CONFIG_NAME}.bak"

    if [ ! -s "${CONFIG_FOLDER}/${CONFIG_NAME}" ]; then
        cp -b "${CONFIG_FOLDER}/default_${CONFIG_NAME}" "${CONFIG_FOLDER}/${CONFIG_NAME}"
    fi
}

function checkConfig(){
    local force=${1:-false}

    if [ ! -s "${CONFIG_FILE}" ] || [ "${force}" == "true" ]; then

        mkdir -p "${CONFIG_FOLDER}" || echo "Can not create default config at ${CONFIG_FILE}" && echo "Default config was created"

        getServerVersion && refreshDefaultConfigFile \
        && refreshDefaultConfig
    fi

    loadConfig
}

function checkLastUpdateDate(){

    if [ "${AUTOUPDATE}" == true ] || [ ! -z ${JUST_UPDATE+x} ]; then

        # Get last update date from config
        local LAST_UPDATE_DATE=$(cat "${CONFIG_FILE}" | grep --perl-regexp  'LAST_UPDATE_DATE\: ([0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2})' | cut -d " " -f 2)
        local current_date="$(date +%F)"

        if [[ ! "${current_date}" == "${LAST_UPDATE_DATE}" ]] || [ "${JUST_UPDATE:-false}" == true ]
        then
            sed -E -i "s/LAST_UPDATE_DATE\: ([0-9]{4}\-[0-9]{1,2}\-[0-9]{1,2})/LAST_UPDATE_DATE\: ${current_date}/" "${CONFIG_FILE}"\
            || echo "Missing 'LAST_UPDATE_DATE' parameter in ${CONFIG_FILE}"
            echo "Check for update" && checkOnlineVersion
        fi

    else

        echo -e "Autoupdate is${RED} OFF ${NORMAL}"
    fi
}

function checkOnlineVersion(){

    ping -c 2 Github.com 2>>/dev/null 1>&2 || (echo -e "Github.com ${RED} Unrechable ${NORMAL}" && exit 1)

    getServerVersion

    local server_version=$(cat "${SCRIPT_SERVER_VERSION}/task-runner" | grep --max-count=1 'VERSION' |  cut -d "=" -f 2)

    versionCompare ${VERSION} ${server_version} \
    && echo -e "${YELLOW} Latest version is instaled ${NORMAL}" \
    || (echo -e "${GREEN} New wersion on GitHub ${NORMAL}" \
    && replaceLocalScript ${server_version} )
}

function replaceLocalScript(){

    local online_version="${1}"
    local script_full_path=$(which ${SCRIPT_NAME} | head -n 1)

    cp -b "${script_full_path}" "${script_full_path}.bak" \
    && cp -b "${SCRIPT_SERVER_VERSION}/${SCRIPT_NAME}" $(dirname ${script_full_path}) \
    && refreshDefaultConfigFile

    # Cleaning
    rm -rf "$SCRIPT_SERVER_VERSION" "${script_full_path}.bak"

    echo -e "${GREEN}${BOLD}Skrypt zaktualizowany${NORMAL}" \
    && kill -9 $$ && exit 0
}

function loadConfig(){
    eval $(parseYaml "${CONFIG_FILE}")
    declare -ax arrayOfCommands=($COMMANDS:-)
    ARRAY_OF_COMMANDS=(${arrayOfCommands[@]})
}

function parseYaml() {

# Problem jest taki że ostatni element ma ':-'
# powodem jest `set -u # or set -o nounset`
    local prefix=${2:-}
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')

    sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
}'
}

# ==============  TaskRunner  ===============

function defineVariable(){
    local name="${1}"
    local value="${2:-true}"

    # Define custom variable
    if [ ! -z "${name}" ];then
        eval "${name}"=${value}
    fi
}

function defineVarOnGrep(){

    grep --count "${stringToGrep}" "${tmpfile}" "${outputFile}" >> /dev/null \
    && echo -e ${INFO_FORMAT}"\n\t ${messageOnGrep} ${CLEAR_FORMAT}\n"\
    && defineVariable "${grepVarName}"
}

function setResultBadge(){

    if [ "${exitCode}" == "SKIP" ]; then
        RESULT="${CLEAR_FORMAT}[${INFO_FORMAT}SKIP${CLEAR_FORMAT}]"
        exitCode=0

    elif [ "${exitCode}" -ge 1 ]; then
        RESULT="${CLEAR_FORMAT}[${ERR_FORMAT}FAIL${CLEAR_FORMAT}]"
        echo -e ${ERR_FORMAT} "\n\t Error code $exitCode"

        # Define custom variable if Grep is not set
        if [ -z "${stringToGrep}" ]; then
            defineVariable "${grepVarName}"
        fi

    else
        RESULT="${CLEAR_FORMAT}[${SCCESS_FORMAT}DONE${CLEAR_FORMAT}]"
    fi

    # Moves cursor
    tput sc
    tput cuf 80;tput cuu 2; echo -e "${RESULT}"
    tput rc
}

function runCommands(){
    # naprawia bug `parseYaml()` `/:-`
    for command in "${ARRAY_OF_COMMANDS[@]/:-}"
    do
        parseYmlToCommand "${command}"
    done
}

function defineCommand(){

    local verbose="${1}"
    local dieOnError="${2}"
    local command="${3}"
    local description="${4}"
    local successVarName="${5}"
    local failVarName="${6}"
    local grepVarName="${7}"
    local stringToGrep="${8}"
    local messageOnGrep="${9}"
    local runIfVarExistAndIsTrue="${10}"

    # Eval and Check if variable is define to 'true'
    if [ "${runIfVarExistAndIsTrue:-}" != "" ] \
    && [ "${!runIfVarExistAndIsTrue:-}" != "true" ]
    then
        return ${ERR_RUN_CONDITION_NOT_FULFILLED:-1}
    fi

    local tmpfile=$(mktemp /tmp/${SCRIPT_NAME}.XXXXXX)
    local outputFile=$(mktemp /tmp/${SCRIPT_NAME}.XXXXXX)

    # Fuzzines
    local regexpNumber='^[0-9]+$'
    if [ ${verbose:-"false"} == "true" ] \
    || ([[ ${verbose} =~ $regexpNumber ]] && (( ${verbose:-0} >= 1 ))) \
    || [ "${verbose:-''}" == "v" ] \
    || [ "${verbose:-''}" == "verbose" ]; then
        verbose=true
    else
        verbose=false
    fi

    echo -e ${DESCRIPTION_FORMAT} "${description}" ${CLEAR_FORMAT}
    echo -e ${COMMAND_FORMAT} "${command} \n" ${CLEAR_FORMAT}

    preExecute
    setResultBadge

    echo -e ${CLEAR_FORMAT}"\n"

    rm "${tmpfile}" "${outputFile}"

    # Stop script on error (define)
    if [ "${dieOnError}" == "true" ] && [ ${exitCode} -ge 1 ]; then
        exit ${exitCode}
    fi
}

function parseYmlToCommand(){

    local commandDefinition="${1}"

    local command="${commandDefinition}_command"
    local verbose="${commandDefinition}_verbose"
    local exit_on_error="${commandDefinition}_exit_on_error"
    local description="${commandDefinition}_description"
    local set_var_grep="${commandDefinition}_set_var_grep"
    local set_var_success="${commandDefinition}_set_var_success"
    local set_var_fail="${commandDefinition}_set_var_fail"
    local set_var_on_success="${commandDefinition}_set_var_on_success"
    local grep="${commandDefinition}_grep"
    local grep_message="${commandDefinition}_grep_message"
    local run_if_var_is_true="${commandDefinition}_run_if_var_is_true"

    defineCommand \
    "${VERBOSE:-${!verbose:-false}}"\
    "${!exit_on_error:-false}"\
    "${!command:?\"${RED}Command in config is empty.${NORMAL} Run ${BLUE}${BOLD}${SCRIPT_NAME} -c${NORMAL}\"}"\
    "${!description:?\"${RED}Description in config is empty.${NORMAL} Run ${BLUE}${BOLD}${SCRIPT_NAME} -c${NORMAL}\"}"\
    "${!set_var_success:-${commandDefinition^^}_SUCCESS}"\
    "${!set_var_fail:-${commandDefinition^^}_FAIL}"\
    "${!set_var_grep:-${commandDefinition^^}_GREP}"\
    "${!grep:-}"\
    "${!grep_message:-"No message for the string ${GREEN}\'${!grep:-}\'${YELLOW}${BOLD} found"}"\
    "${!run_if_var_is_true:-}"
}

function executeCommand(){

    exitCode=0

    if $verbose
    then
        script --quiet --return --command "$command" "$tmpfile" || exitCode=$?

    else
        echo -e ${OUTPUT_FORMAT}; script --quiet --return --command "${command} 1> ${outputFile}" "${tmpfile}" || exitCode=$?

        # Dispaly Output 1 if err and Output 2 is empty
        if [ -s "${tmpfile}" ] && [ ${exitCode} -ge 1 ];then
            cat "${outputFile}"
        fi
    fi

    if [ ${exitCode} -eq 0 ];then
        defineVariable "${successVarName}"
    elif [ ${exitCode} -ge 1 ];then
        defineVariable "${failVarName}"
    fi

    # Call grep function
    if [ ! -z "${stringToGrep}" ]; then
        defineVarOnGrep "${stringToGrep}" "${grepVarName}"
    fi
}

function preExecute(){

    case "$command" in

        "npm install")

            if ! [ -f package.json ]; then
                echo -e "\n\t ${ERR_FORMAT}package.json${INFO_FORMAT} not found"
                exitCode=SKIP
                return;
            fi
        ;;
        *bin/console*)
            if ! [ -f bin/console ]; then
                echo -e ${INFO_FORMAT}"Change bin/console to app/console"${CLEAR_FORMAT}
                command=$(echo "${command}" | sed -u 's/bin\/console/app\/console/')
                echo "${command}"
            fi
        ;;
    esac

    executeCommand
}


usage() {
    echo -e "
    Usage: $(basename ${0})                                   \n\n\
        -c    'edit configuration'                          \n\
        -s    'show configuration'                          \n\
        -d    'enable debuging mode'                        \n\
        -v    'all commands verbose'                        \n\
        -u    'self update'                                 \n\n\n\
    Configuration:                                          \n\n\
        Version:                    ${VERSION}              \n\
        Repository:                 ${GITHUB_URL}           \n\
        Configuration folder:       ${CONFIG_FOLDER}        \n\
        Configuration file:         ${CONFIG_NAME}          \n\
        Default configuration file: ${CONFIG_DEFAULT_NAME}     "
    1>&2; exit 1;
}


#   ================= MAIN ==================  #

while getopts ":dlcfsuvvt" o; do
    case "${o}" in
        d)
            echo "Debug mode is ON"

            set -x ;
            set -o functrace
        ;;
        l)
            initial
            CONFIG_FILE="./${CONFIG_REPO_NAME}"
            if [ -s "${CONFIG_FILE}" ]; then
                less "${CONFIG_FILE}"
            fi

            exit 0
        ;;
        c)
            initial

            if [ -e "${CONFIG_FILE}" ]; then
                editor "${CONFIG_FILE}"
            else
                checkConfig
                editor "${CONFIG_FILE}"
            fi

            exit 0
        ;;
        f)
            initial
            checkConfig "true"
            exit 0
        ;;
        s)
            initial

            if [ -e "${CONFIG_FILE}" ]; then
                less "${CONFIG_FILE}"
            else
                checkConfig
                less "${CONFIG_FILE}"
            fi

            exit 0
        ;;
        u)
            JUST_UPDATE=true
        ;;
        v)
            VERBOSE=$((${VERBOSE:-0} + 1))
        ;;
        *)
            usage
        ;;
    esac
done
shift $((OPTIND-1))


# Defines variables and create temp files
initial

# Install requierd programs
isInstalled git wget less

# Get config
checkConfig

# Check for new update
checkLastUpdateDate

[ "${JUST_UPDATE:=false}" == true ] && exit 0

# Run tasks
runCommands
